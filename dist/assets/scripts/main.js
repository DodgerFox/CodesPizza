"use strict";window.onload=(()=>{codes.init(),panel.init(),add.init()});const codes={async init(){await this.catcheDOM(),await this.bindEvents()},catcheDOM(){this.app=document.querySelector(".codes")},bindEvents(){this.app.addEventListener("click",()=>this.clickHandler(event))},async clickHandler(e){const t=e.target;t.classList.toggle("used"),console.log(t)},copyToBuffer(){element.innerHTML;var e;if(document.selection)(e=document.body.createTextRange()).moveToElementText(element),e.select().createTextRange(),console.log("!!");else{if(!window.getSelection)return;(e=document.createRange()).selectNode(element),e.toString(element),console.log(e.toString(element)),window.getSelection().addRange(e)}try{var t=document.execCommand("copy")?"successful":"unsuccessful";console.log("Copy command was "+t)}catch(e){console.log("Oops, unable to copy")}}},panel={async init(){await this.catcheDOM(),await this.bindEvents()},catcheDOM(){this.app=document.querySelector(".header")},bindEvents(){this.app.addEventListener("click",()=>this.clickHandler(event))},async clickHandler(e){const t=e.target;switch(console.log(t),t.classList[0]){case"panel-add":add.switchState();break;case"user":this.switchUser(t)}},switchUser(e){e.classList.toggle("open")}},add={async init(){await this.catcheDOM(),await this.bindEvents()},catcheDOM(){this.app=document.querySelector(".add")},bindEvents(){this.app.addEventListener("click",()=>this.clickHandler(event))},async clickHandler(e){switch(e.target.classList[0]){case"add-close":this.switchState()}},switchState(){this.app.classList.toggle("open")}};